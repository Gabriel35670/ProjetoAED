Rotações em arvores binárias de busca:

Uma rotação pega um par pai-filho e inverte sua relação, teremos rotação à esquerda e à direita

Como realizar uma rotação em AAB:

Ultilizando poucas operações, e preservando a propriedade de busca. Com o teste algoritimico, é possível perceber que se modificiam apenas 3 apontadores ao realizar
esta operação.

Código:

Arvore rotacaoDir(Arvore r){

    Noh *aux;

    aux = r->esq;
    r->esq = aux->dir;

    if(aux->dir != NULL)
        aux->dir->pai = r;

    aux->dir = r;
    r->pai = aux;

    return aux;
}

Arvore rotacaoEsq(Arvore r){

    Noh *aux;

    aux = r->dir;
    r->dir = aux->esq;

    if(aux->esq != NULL)
        aux->esq->pai = r;

    aux->esq = r;
    r->pai = aux;

    return aux;
}

Impacto de uma rotação na altura de uma subarvore:

Com a rotação a direita da arvore, ela parece interessante se h_a>h_c, pois diminui o impacto de h_a na altura final, todavia aumenta o impacto de h_c, já
h_b não é alterado durante a rotação, para modificar a altura de h_b, é necessário fazer uma rotação dupla, que é uma rotação esquerda, seguida de uma rotação
a direita.

Impacto de uma rotação dupla na altura da subarvore:

Uma rotação dupla é uma rotação esquerda-direita.


Arvores AVL:

O nome AVL vem do inventor da prórpia árvore, a caracteristica central é o fator de balanceamento de um nó, que corresponde entre a altura da sub arvore direita
e a subarvore esquerda, e olhando para um nó saiba o quão desbalanceada estão as subarvores filhas do nó, um arvore é dita AVL se todos os seus nós tem fator
de balanceamento entre -1 e +1, intuitivamente, essa propriedade garante que uma arvore AVL é pouco desbalanceada, e asssim essa propriedade limita o pior caso
do desbalanceamento dessa arvores.

Estrutura de um nó de uma arvore AVL:

typedef int Cont;
typedef int Chave;

typedef struct noh{

    int bal;
    Chave chave;
    Cont conteudo;
    struct noh *pai;
    struct noh *esq;
    struct noh *dir;

}Noh;

typedef Noh *Arvore;

Inserção em arvores AVL:

A inserção precisa cubrir 4 casos possiveis de inserção de nós.

Caso 0: Altura da subarvore em que ocorreu a inserção não aumentou, o algoritmo nao precisa fazer correções e devolve que altura não aumentou

Caso 1: Se a arvore era vazia, cria um nó com dois filhos NULL e balanceamento 0, e devolva que a altura da arvore aumentou

Caso 2: Se inseriu na subarvore mais baixa e altura dessa aumentou, mude o balanceamento da raiz para 0, e devolva que a altura não aumentou

Caso 3: Se inseriu em qualquer uma das subarvores quando as alturas eram iguais(i.e balanceamento da raiz igual a 0), e a altura da subarvore aumentou,para efetuar
atualize o balanceamento para -1 ou +1, e devolva que a altura aumentou.

Caso 4:Se inseriu na subarvore mais alta e a altura desta aumentou, nesse caso não basta apenas corrigir o fator de balanceamento, é preciso realizar uma
ou mais rotações para restaurar a propriedade AVL

Caso 4.1: Subcaso do caso 4, todavia, seria a reorganização após inserção na subarvore esquerda, o fator de balanceamento da raiz desta subarvore é -1, para isso,
deve-se fazer uma rotação direita, para balancear a arvore.

Caso 4.2: Novamente uma inserção na subarvore esquerda, mas desta vez, o fato de balanceamento da raiz desta subarvore é +1, ou seja, inserção foi a direita, para
resolver esse caso, é necessário uma rotação dupla.

A seguir temos o código de inserção para um arvore AVL:

Primeiro, função novoNOH, na qual é criado um novo NOH:

Noh *novoNOH(Chave chave,Cont conteudo){

    Noh *novo;
    novo = (Noh*)malloc(sizeof(Noh));

    novo->bal = 0;
    novo->chave = chave;
    novo->conteudo = conteudo;
    novo->pai = NULL;
    novo->esq = NULL;
    novo->dir = NULL;

    return novo;

}

A segunda função é a insereAVL que é a parte mais profunda da inserção:

Arvore insereAVL(Noh *r,Noh *novo,int *aumentou_altura){

}

A terceira função é a inserir, que chama a função insereAVL, e cria o noh

Arvore inserir(Arvore r,Chave chave,Cont conteudo){
    int aumentou_altura;
    Noh *novo = novoNOH(chave,conteudo);

    return insereAVL(r,novo,&aumentou_altura);
}

A eficiencia da inserção continua proporcional a altura da arvore.

Altura maxima das arvores AVL:

Dada uma arvore AVL de altura h, qual o menor numero de nois que ela pode ter, no caso de ser um arvora binaria de busca, ela pode variar, de lg n < h > n-1,
onde n é o número de nós, então pode variar demais, e o intuito de construir arvores AVL é restringir o crescimento da altura.
Ou seja  a F_h é composta por um nó raiz cujo o filho esquerdo é F_h1 e  o direito é F_h2, ou seja, os filhos são arvores AVL com o menor número possivel de 
nós. Seja N(h) o nuemro de nos da arvore F_h, temos que:

N(0) = 1
N(1) = 2
Para h >= 2, N(h) = 1 + N(h-1) + N(h-2)

A altura maximo de uma arvore AVL é no maximo 2 lg (n+1)


Remoção de nós em arvores AVL:

Similar aos casos da inserção , mas um tanto mais complexo, o algoritmo de recursão começa transformando, se necessario, a remoção do nó alvo, na remoção
de um nó com no máximo um filho, como ocorre nas arvores binárias comuns.

Caso 0: Se altura da subarvore em que ocorreu a remoção não diminuiu, o algoritmo nao precisa realizar correções e devolve que a altura nao diminuiu

Caso 1: se o nó atual é o alvo, lembrando que ele tem no máximo um filho, remova o nó e corrija a subarvore resultante, e devolva que altura diminuiu

Caso 2:Se a altura das duas subarvores era igual(balanceamento da raiz era 0) e altura da subarvore em que ocorreu a remoção diminuiu, então se corrige
o fator de balanceamento e devolve que a altura da sua arvore não diminuiu.



balanceamento, valem as mesma regras da inserção, e remover um nó da sub arvore da direita, equivale a inserir um nó na sub arvore da esquerda, e vice e versa

Dessa forma, são necessarias 2 funções a função remove_ArvAVL e a função procuraMenor