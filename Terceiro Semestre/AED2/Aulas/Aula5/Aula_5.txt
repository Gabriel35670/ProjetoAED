Arvores Rubro-Negras:

São arvores binarias de busca balanceadas que ultilizam rotações para manter um fator de balanceamento, mas não ultilizam explicitamente o valor
de balanceamento.


Definição:

-Cada nó é vermelho ou preto
-Raiz deve ser sempre preto
-Dois nós vermelhos não podem ser adjacentes, logo um nó vermelho só pode ter filhos pretos
-Todo caminho da raiz até um apontador NULL(caminho raiz NULL) tem o mesmo numero de nós pretos.


Altura máxima em arvores Rubro-Negras:

A altura de uma arvore é igual ao comprimento do maior caminho raiz NULL, dessa forma, deseja-se limitar superiormente o comprimento de qualquer caminho.

Se todo caminho raiz NULL de uma arvore tem pelo menos k nós, então os primeiros k níveis da arvore devem estar completos. Caso contrário, haveria um caminho da raiz
atéo nó ausente resultando, em um caminho raizNULL de comprimento menor que k-1, lembrando que o comprimento de um caminho p é |p|-1.

Portanto, sendo uma altura k(niveis completos da arvore), é no maximo lg(n+1), onde n é o nro de nós.

Pelas propriedades, pode-se afirmar que o número maximo de nós em qualquer caminho da arvore, vai ser no máximo a 2 vezes o numero de nós pretos.


Inserção em arvores rubro-negras:

Inserir um novo nó como uma folha vermelha, após percorrer um caminho descendente na árvore, e ultilizar rotações para restabelecer as propriedades

Caso1: Se y(, pai de x, não for vermelho: Nada a ser feito, já que nenhuma propriedade é quebrada

Caso2: Se y é vermelho, temos que restaurar a propriedade 3, sabe-se que nao se trata da raiz, pela propriedade 2, e que z, o pai de y é preto, pela propriedade
3

Caso2.1: z tem outro filho w que tem cor vermelha, recolorir a arvore, substituindo w e y para a cor preta, e z para a cor vermelha. Com isso preserva-se localmente
a propriedade 4, MAS é necessário analisar a situação de z, pois seu pai pode ser vermelho e dessa forma a propriedade 3 seria violada, mas caso z for a raiz
basta mudar a cor para preto, visto que a raiz, está entre as duas principais subarvores.


Caso 2.2: z não tem outro filho vermelho, nesse caso pode ter outro filho preto. Caso z tiver um filho preto, fazemos uma rotação a direita entre z e y, e então
muda-se a cor de x para preto, mas seria necessario analisar a situação de y(nova raiz da subarvore), pois como é vermelho, pode violar a propriedade 3, caso y
for a nova raiz da arvore, basta mudar para preto. Note que caso o z não tivesse outro filho, a mesma situação funcionaria.


