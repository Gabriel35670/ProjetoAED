Tabela de Símbolos:

->COrresponde a um conjunto de itens, onde cada um possui uma chave
e um valor, e suporta diversas operações sobre os itens, essa chave é o 
identificador do item, e por ele se busca pelo item, a principal operação
é a busca, visto que pode localiza-la ou informar que nao existe, também suporta
a remoção ou inserção, costuma ser uma estrutura dinamica que permite a insoncstacia
dos dados. Essa tabela, é um tipo abstrato de dados, pois o foco está em seu 
proposito, e os detalhes ficam escondidos do usuario, para facilitar.

->Possui diversas aplicações como uma manutenção em compiladores, bloqueio de tráfego de
IP's, ou detectar duplicatas.

Problema:

->Dado um vetor v de inteiros e um valor alvo inteiro, para isso, deve-se determinar
se existe um par de elementos em v, cuja a soma é igual ao alvo, para isso podemos usuar
diversas abordagens.

Primeira abordagem: Busca exaustiva, ou seja, formar todos os pares possiveis
e verificar se a soma entre eles resulta no alvo. Entretanto, percebe-se que usando
essa abordagem, não é tão eficiente. NOTA SE: que o segundo laço começa em i+1,
visto que a soma é uma operação comutativa, e por isso a+b = b+a, logo não é
necessário realizar essa soma duas vezes.

Segunda abordagem: Busca linear pelo complemento de cada elemento, ou seja,
corresponde ao valor do alvo menos o valor do primeiro elemento da dupla, ou seja
se alvo - a = c, então deve-se procurar no vetor por c, e novamente, o segundo laços
se inicia em i+1, pois não se pode repetir duplas. Novamente, essa abordagem continua
muito ineficiente, mesmo se fosse realizada várias alterações, como por exemplo, reduzir a invariante de laço
para o valor n-1, visto que como se trata de uma dupla, o primeiro laço deve ter como index máximo o valor
de n-2, e o segundo laço, deve ter n-1, pois essa, teoricamente seria a ultima dupla.

Terceira abordagem: Uniar a busca binária com a ordenação do vetor, ou seja, primeiro, ordenar o vetor
e em seguida calcular a subtração entre alvo-a = c, e com isso realizar n-1 buscas binárias, que leva
tempo log(n), e dessa forma se torna mais eficiente, logo deve-se construir um mecanismo de ordenação
eficiente.

Quarta abordagem: Novamente realizar uma ordenação do vetor com algum mecanismo eficiente de sort,
após isso realizar novamente a ideia de complemento, com isso usar um for que vá até n-1,
e após isso realizar uma busca inteligente, ou seja, no segundo laço, realizar condições, ou seja,
como j começara no final do vetor(n-1), o segundo laço analisa de o index j é maior que i, para evitar
duplas com mesmos elementos, também observa-se se o elemento na posição j, é maior ou igual ao alvo, pois caso for
menor, como o vetor está ordenado oque está para baixo, é menor ainda, ou seja não serve. E  também, não precisa
compara os valores já analisados pois como o valor no index i aumenta, o complemento irá diminuir, logo não precisa
comparar novamente.

Quinta abordagem: Usar tabela de símbolos. No primeiro laço, insere-se  em uma tabela de símbolos cada elemento do vetor
de forma desordenada, no segundo for, calcula-se o complemento de cada elemento do vetor, e com isso, procura se o complemento 
está na tabela de símbolos.